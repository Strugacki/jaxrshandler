<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://camel.apache.org/schema/spring
		http://camel.apache.org/schema/spring/camel-spring.xsd
	http://camel.apache.org/schema/cxf
		http://camel.apache.org/schema/cxf/camel-cxf.xsd">

    <import resource="classpath:META-INF/cxf/cxf.xml" />
    <import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
    <import resource="classpath:META-INF/cxf/cxf-extension-jaxrs-binding.xml" />
    <import resource="classpath:META-INF/cxf/cxf-extension-http-jetty.xml" />


    <context:component-scan base-package="com.pgs.mhallman.controller" />
    <context:component-scan base-package="com.pgs.mhallman.processor" />
    <bean id="personRepository" class="com.pgs.mhallman.repository.PersonRepositoryImpl" />

    <cxf:rsServer id="myRestServer" address="http://localhost:8090/jaxrs-handler/rest">
        <cxf:serviceBeans>
            <ref bean="myResource" />
        </cxf:serviceBeans>
        <cxf:providers>
            <bean class="org.codehaus.jackson.jaxrs.JacksonJsonProvider"/>
        </cxf:providers>
    </cxf:rsServer>

    <!-- Beans with Exceptions !-->
    <bean id="forced" class="java.lang.IllegalArgumentException">
        <constructor-arg index="0" value="This is an happy exception :)" />
    </bean>

    <bean id="runtimeException" class="java.lang.RuntimeException"/>

    <bean id="webException" class="javax.ws.rs.WebApplicationException">
        <constructor-arg name="status" value="500" />
    </bean>

    <bean id="loggingErrorHandler" class="org.apache.camel.builder.LoggingErrorHandlerBuilder">
        <property name="level" value="INFO" />
    </bean>


    <!-- Bean with DeadLetterChannel !-->
    <bean name="deadLetterChannelBean" class="org.apache.camel.builder.DeadLetterChannelBuilder">
        <property name="deadLetterUri" value="direct:deadChannel" />
        <property name="redeliveryPolicy" ref="redeliveryConfig" />
    </bean>

    <!-- Config for Redelivery !-->
    <bean name="redeliveryConfig" class="org.apache.camel.processor.RedeliveryPolicy" >
        <!-- try redelivery at most 3 times, after that the exchange is dead and its routed to the mock:dead endpoint -->
        <property name="maximumRedeliveries" value="3"/>
        <!-- delay 250ms before redelivery -->
        <property name="redeliveryDelay" value="1000"/>
        <property name="retryAttemptedLogLevel" value="INFO"/>
        <property name="logExhausted" value="false"/>
    </bean>


    <camelContext xmlns="http://camel.apache.org/schema/spring" errorHandlerRef="deadLetterChannel">
        <!-- Error Handler vs On Exception
             The first one can handle uncaught exceptions
             The second one looks for exceptions declared in onException clause !-->

        <errorHandler id="deadLetterChannel" type="DeadLetterChannel" deadLetterUri="direct:deadChannelIn"
                      onRedeliveryRef="deadLetterChannelInProcessor">
            <redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="1000" retryAttemptedLogLevel="INFO"/>
        </errorHandler>

        <onException>
            <exception>java.lang.IllegalArgumentException</exception>
            <!-- If Continued is set to TRUE then Camel will Ignore the fact that the exception was caught
                 and will continue routing. It will even pass exceptions when you use DeadLetterChannel !-->
            <continued>
                <constant>true</constant>
            </continued>
        </onException>

        <onException>
            <exception>java.lang.RuntimeException</exception>
            <!-- If Handled is set FALSE then routing will NOT break as the exception appears, otherwise it won't try to process routing !-->
            <handled>
                <constant>false</constant>
            </handled>
        </onException>

        <onException>
            <exception>javax.ws.rs.WebApplicationException</exception>
            <!-- If Handled is set TRUE then routing will break as the exception appears, otherwise it will try to process routing !-->
            <handled>
                <constant>true</constant>
            </handled>
        </onException>

        <route id="masterRoute">
            <from uri="cxfrs:bean:myRestServer?bindingStyle=SimpleConsumer" />
            <choice>
                <when>
                    <simple>${header.operationName} == 'getCamelGetPerson'</simple>
                    <to uri="direct:getCamelGetPerson" />
                </when>
                <when>
                    <simple>${header.operationName} == 'getWebAppException'</simple>
                    <to uri="direct:getWebAppException"/>
                </when>
                <when>
                    <simple>${header.operationName} == 'getIllegalArgumentException'</simple>
                    <to uri="direct:getIllegalArgumentException"/>
                </when>
                <when>
                    <simple>${header.operationName} == 'getRuntimeException'</simple>
                    <to uri="direct:getRuntimeException"/>
                </when>
            </choice>
        </route>

        <!-- Routes for APP endpoints !-->
        <route id="getCamelGetPerson">
            <from uri="direct:getCamelGetPerson" />
            <process ref="getPersonProcessor" />
            <!--<to uri="log:body?level=INFO" />-->
        </route>

        <route id="getWebAppException">
            <from uri="direct:getWebAppException"/>
            <throwException ref="webException" />
        </route>

        <route id="getIllegalArgumentException">
            <from uri="direct:getIllegalArgumentException"/>
            <throwException ref="forced" />
        </route>

        <route id="getRuntimeException">
            <from uri="direct:getRuntimeException"/>
            <throwException ref="runtimeException"/>
        </route>

        <!-- Dead Letter Channel Routes !-->
        <route id="deadChannelIn">
            <from uri="direct:deadChannelIn"/>
            <log logName="deadLetterNotification" loggingLevel="ERROR" message="Exception going to DeadLetterChannel" />
            <to uri="direct:deadChannelOut"/>
        </route>

        <route id="deadChannelOut">
            <from uri="direct:deadChannelOut"/>
            <process ref="deadLetterChannelOutProcessor"/>
            <to uri="log:body?level=INFO"/>
        </route>

    </camelContext>

</beans>